1.IO流是用来传输数据的技术，典型应用包括读写文件
	内存：断电之后内存消失
	硬盘：断电之后数据任然存在
	内存<--硬盘 为Input输入，读
	内存-->硬盘 为Onput输出，写
	
2.IO流的分类：
	字节流：可以出来任何一种文件数据
	字符流：只能处理纯文本文件
	a）字节输入流
	b）字节输出流
	c）字符输入流：FileReader、BufferedReader
	d）字符输出流：FileWriter、BufferedWriter
	
3.FileWriter一般使用步骤：创、写、关
	构造方法： public FileWriter(String fileName)
	a）创：FileWriter fw = new FileWriter("file01.txt");	//参数为文件的路径名称，文件扩展名.txt表示用什么软件打开
	成员方法
	写数据： public void write(String str):参数就是需要写到文件中的字符串
	关闭流： public void close():关闭，释放相关资源
	b）写：fw.write("Hello");
	c）关：fw.close();
	注意事项：
	1.千万不要忘记最后调用close方法进行关闭
	2.创建的时候，如果提示肯能有异常，那么就鼠标悬停，然后点击Add throws...即可
	
4.Filewriter如何才能追加写入呢？构造方法第二参数为true即可。
	1.如果指定问价不存在，那么会自动创建该文件
	2.如果指定的文件以存在，那么将会覆盖写入
	3.如果不希望进行覆盖写入，而是希望进行追加，那么要用另外一种重载形式的构造方法：
		public FileWriter(String fileName,boolean append):  第二个参数如果是true值，那么将会追加写入

5.如何实现换行？
	a）Windows当中：\r\n
	b）macOS当中：\r或者\n
	c）Linux当中：\n
	
6.五种write方法的重载：
	a）写字符串的整体
		public void write(String str)
	b）写字符串的部分
		public void write(String str,int offset,int count)
	c）写字符数组的整体
		public void write(char[] array)
	d）写字符数组的部分
		public void write(char[] array,int offset,int count)
	e）写当字符对应的数字（参考ASCII码表或者Unicode表） 
		public void write(int ch)
	
7.FileReader一般使用步骤：创、读、关   示例：Demo01FileReaderWhile和Demo01FileReaderArray
	a）创：FileReader fr = new FileReader（“file01.txt”）;
	b）读单个字符： public int read():读取下一个字符，返回得到对应的ASCII货Unicode值
		int ch; //单个字符的ASCII值
		while((ch = fr.read())!= -1){
			//...
		}
	c）读字符数组：public int read(char[] buf):一次读取整个字符数组的数据，
			//参数是一个字符数组，用来承载读取到的多个字符。返回值代表的是数组当中读取到的有效个数
		char[] buf = new char[1024];
		int len; //有效个数
		while((len = fr.read(buf))!=-1){
			String str = new String(buf,0,len);  //根据字符数组来创建一个字符串
		}
		
8.BufferedXxx和FileXxx有什么区别？BufferedXxx有8192长度的char[]字符数组作为缓冲，所以性能更高一些
	每次在写数据的时候，实际上都是在不断地向缓冲区数组当中添加字符
	如果缓冲区数组已经满了，那么将会统一地写到硬盘的文件当中
	如果还没有写满，那么就等待下一次写入
	如果最终关闭的时候，数组仍然没满，那么也会将剩余的有效部分写到硬盘文件里

如何使用BufferdWriter?   //示例：Demo01BufferedWriter
	1.首先创建一个普通的FileWrite
	2.将这个普通的FileWrite包装成为缓冲的BufferedWriter，用构造方法
	3.后面BufferedWrited使用的方法和FileWriter基本一样
	构造方法：
		public BufferedWriter(FileWriter fw):参数就是一个普通的FileWriter对象

BufferedReader和FileReader差不多，也是用来读取文件的一种字符输入流
	区别在于BufferedReader里有一个8192长度的char[]字符数组，当做缓冲区使用
	当读取数据的时候，一次性从硬盘当中读取最多8192个字符，放在缓冲区当中
	在调用read（）方法的时候，只是从缓冲区当中拿出来字符进行使用
	如果缓冲区当中的字符被“取空”，那么将会自动再次读取最多8192个再次放入缓冲区当中
	
如何使用BufferedReader?
	1.首先创建一个普通的FileReader
	2.将这个普通的FileReader包装成为缓冲的BufferedReader，用构造方法
	3.使用起来和普通的FileReader基本没有区别
	构造方法：
		public BufferedReader(FileReader fr):参数就是一个普通的FileReader对象
	
9.BufferedWriter有额外的方法：public void newline(),根据操作系统自动选择写入换行符。

10.BufferedReader也有额外的方法：public String readLine(),读取一行字符串，不包含换行符。

11.关于方法的参数和返回值类型：
	a）任何数据类型（基本类型、数组、字符串、自定义的类）都可以作为参数
	b）任何数据类型（基本类型、数组、字符串、自定义的类）都可以作为返回值