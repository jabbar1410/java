1.面向过程：当需要实现一个功能的时候，每一个过程中的详细步骤和细节都要自己做。

2.面向对象：当需要实现一个功能的时候，不关心详细的步骤细节，而是找人帮我做事
	面向对象的三个特征：
		1.封装
		2.继承
		3.多态

3.类和对象的关系：
	a） 类事抽象的，通常不能直接使用。好像是一张手机设计图纸。
	b） 对象是具体的，根据类创建一个对象使用，也就是根据图纸创造一个手机。
	
4.如何定义一个类：成员变量、成员方法。
	a）成员变量：直接定义在类当中，在方法外面
	b）成员变量：去掉static关键字，其他和此前的普通方法一样

5.如何根据类创建对象，格式：类名称 对象名 = new 类名称（）；

6.如何使用对象：
	a）使用成员变量：对象名.成员变量名；
	//没有对成员变量赋值，打印输出为默认值
	b）调用成员方法：对象名.成员方法名（参数）；
	如何使用定义好的类：
		1.导包
		如果需要使用的目标类和当前类（含有main方法的类）位于同一个包下，那么可以省略导包不写。
		否则需要使用import导包语句
		2.创建
		类名称 对象名 = new 类名称（）；
		3.使用
	
7.局部变量和成员变量的区别：
	a）定义的位置不同
		局部变量：定义在方法内部的
		成员变量：直接定义在类当中，在方法的外面的
	b）内存的位置不同
		局部变量：在栈内存当中，Stack
		成员变量：在堆内存当中，Heap
	c）生命周期不同
		局部变量：随着方法的进栈而出现，随着方法的出栈而消失
		成员变量：随着对象被创建而出现，随着对象被JVM回收而消失
	d）默认值不同
		局部变量：没有默认值，必须赋值之后才能使用
		成员变量：如果没有赋值，那么将会有一个默认值
	
8.private关键字用法：直接写在成员变量前面，类外面不能直接访问，确保安全性。
	间接访问：编写一对Getter Setter方法。（但是例如：如果是boolean类型，getXxx必须叫做isXxx的形式。）
	
9.this关键字典型用法：用来区分同名的成员变量和局部变量。在成员变量的前面写上“this.”前缀即可。
	//当局部变量和成员变量重名的时候，方法当中就会根据“就近原则”使用局部变量
	扩展：
	this关键字其实代表的是“当前对象”。
	通过谁调用的方法，谁就是this

10.构造方法：专门用来创建对象的方法，通过new关键字创建对象就是在调用构造方法。
	格式：
		public 构造方法名（参数类型 参数名称）{
			方法体
			//return； //通常最后一行return省略不写
		}
	a）构造方法不能写返回值类型，连void都不能写。
	b）构造方法的名称必须和所在的类名称完全一样，大小写也要一样
	c）构造方法也是可以重载的
	d）构造方法如果没有定义，默认会有一个；如果定义了，那么默认的将失效
	默认为：
		public 类名称（）{}；
	
11.如何定义一个标准的POJO类（POJO：PLain Old Java Object）
	a）所有的成员变量都用private修饰
	b）为每一个成员变量编写一对Getter Setter方法
	c）编写一个无参数的构造方法
	d）编写一个全参数的构造方法
