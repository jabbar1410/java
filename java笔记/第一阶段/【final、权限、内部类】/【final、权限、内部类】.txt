final关键字：
	含义：  代表最终的、不可改变的
	用法：
		1.可以用来修饰一个类
			public final class 类名称{//...}
			//修饰后当前类不能有任何子类
		2.可以用来修饰一个方法
			修饰符 final 返回值类型 方法名称（参数列表）{//方法体}
			//修饰方法后，此方法不能被覆盖重写
		3.还可以用来修饰一个局部变量
			final int a = 0;   //修饰基本类型
			final Student stu = new Student(); //修饰引用类型
			//只能赋值一次，如进行第二次赋值会报错
		4.还可以用来修饰一个成员变量
			修饰符 final 参数类型 参数名称 = 数值；
	注意事项：
		1.对于类和方法来说，abstract和interface关键字不能和final同时使用，因为矛盾
		2.对于局部变量，基本类型：不可改变的是变量中的数据；引用类型：不可变的是地址值但其内容任能改变
		3.对于成员变量，如果用了final修饰，其默认值不在给了，必须手动赋值一次。对final的成员变量赋值可以有，直接赋值和通过构造方法赋值，二者选其一。如果选择用构造方法赋值，必须保证所有重载的构造方法，都最终会对final成员变量进行赋值。



Java中四种权限修饰符：
		public	>   protected	>    (default)	>    private
同一个类	 YES		YES		YES		YES		
同一个包	 YES		YES		YES		NO
不同包子类	 YES		YES		NO		NO
不同包非子类	 YES		NO		NO		NO
	备注：
		1.protected表示给子类引用的权限
		2.（defualt）并不是关键字“default”，而是什么也不写 【接口中什么也不写默认为public】



内部类：
	分类：
	1.成员内部类
	2.局部内部类（包含匿名内部类）

1.成员内部类：
	修饰符 class 外部类名称{
		修饰符 class 内部类名称{
			//...
		}
		//...
	}
	特点：内用外，随意访问；外用内，需要创建内部类对象；内部类编译名称为：外部类名$内部类名
	测试类直接访问内部类公式：
		【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】

内部类如何访问外部类的重名成员：
	格式：【外部类名称.this.外部类成员变量名】

2.局部内部类：
	修饰符 class 外部类名称{
		修饰符 返回值类型 外部类方法名称（参数列表）{
			class 局部内部类名称{
				//...
			}
		}
	}
	特点：局部内部类只有当前所属的方法才能使用它，出了这个方法外面就不能用了，局部内部类如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】，即不能多次赋值。

类中权限修饰符的规则：
	1.外部类：public、（default）
	2.成员内部类：public、protected、（default）、private
	3.局部内部类：什么都不能写

3.【匿名内部类】：
	接口名称 对象名 = new 接口名称(){
		//覆盖重写所有抽象方法
	};【分号不要忘写】
	特点：  如果接口的实现类（或者父类的子类）只需要使用唯一的一次，可使用匿名内部类
	格式解析：
		1.new代表创建对象的动作
		2.接口名称（）就是匿名内部类需要实现哪个接口
		3.{...}才是匿名内部类的内容
	注意事项：
		1.匿名内部类，在【创建对象】的时候，只能使用唯一的一次，如果希望多次创建对象，而且类的内容一样的话，那么必须使用单独定义的实现类
		2.匿名对象在【调用方法】的时候，只能调用唯一的一次，如果希望同一个对象，调用多次方法，那么必须给对象起个名字。
		3.匿名内部类省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】，两者不是同一回事。