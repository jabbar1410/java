1.方法：就是讲一些代码使用大括号包起来，然后取一个名字。使用时，只要根据名称调用即可。而且比循环要更加灵活。

2.如何定义一个方法：
	修饰符 返回值类型 方法名（参数类型 参数名称）{    //修饰符为public static
		方法体
		return 返回值；        //return的作用：1.结束当前方法 2.带着返回值交给调用处
	}
	注意事项：
	1.返回值类型必须和返回值对应
	2.如果参数有多个，那么使用逗号进行分隔
	3.如果不需要参数，那么小括号可以留空
	
3.调用方法的三种方式：
	a） 单独调用：方法名称（实际参数）；
	b） 打印调用：System.out.println（方法名称（实际参数））；
		//方法体执行，且会把返回值打印出来
	c） 赋值调用：数据类型 变量名称 = 方法名称（实际参数）；
	关于名称的两个问题：
	1.变量的名称能不能和方法的名称一样？ 可以.
	2.如果有两个方法，每一个方法当中都有一个同名的变量，是否可以？ 可以.

4.如何定义一个没有返回值的方法：
	修饰符 void 方法名称（参数类型 参数名称）{
		方法体
		return； //最后一行return一般都是省略不写的
	}

5.调用没有返回值的方法，只有使用单独调用，不能使用打印调用和赋值调用

6.重载（Overload）：多个方法的名称相同，但是参数列表不同。

7.重载中，什么叫做参数不同：
	a） 参数的个数不同
	b） 参数的类型不同
	c） 参数的多类型顺序不同
	
8.重载中，与什么无关
	a） 与返回值类型无关         //就是返回值类型不同仍然不能构成重载，编译会出错
	b） 与参数名称无关
	c)  与修饰符名称             //就是修饰符不写也不能构成重载，编译会报错

9.参数传递：也就是在调用方法的时候，向方法当中传入数据的动作
	【形式参数】例如：
	public static int (int a, int b){...} //这里的a和b为形式参数
	【实际参数】例如：
	int num = sum(10,20);  //这里的10和20位实际参数

10.参数传递的两项规则：
	a） 对于基本类型（以及String）来说，形式参数的操作【不会】影响实际参数
	b） 对于引用类型（除了String）来说，形式参数的操作【会】影响实际参数。
	示例看Demo02MethordParamBasic和Demo02MethordParamRef