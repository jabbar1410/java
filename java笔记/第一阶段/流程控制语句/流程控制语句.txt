1.流程：也就是代码的若干个步骤，先做什么，后做什么。 

2.流程分类：
	a） 顺序结构
	b） 选择结构
	c） 循环结构

3.选择结构，if语句的格式三种：
	a） 单if语句：执行代码，或者不执行；有或无
		if（布尔表达式）{
			语句体；
		}
	b） 标准的if-else语句：执行A或者执行B，二者选其一
		if（布尔表达式）{
			语句体A；
		}esle{
			语句体B；
		}
	c） 扩展的if-else语句：N者选其一
		if（条件判断1）{
			语句体1；
		}else if（条件判断2）{
			语句体2；
		}
		...
		else if（条件判断N）{
			语句体N；
		}else{
			语句体N+1；
		}

选择语句-switch：
	格式：
		switch(表达式){
			case 常量值1：
				语句体;
				break;
			case 常量值2：
				语句体;
				break;
			...
			default:
				语句体n+1;
				break;
		}
switch语句使用的注意事项：
	1.多个case后面的数值不可以重复
	2.switch后面小括号当中只能是下列数据类型：
	基本数据类型：byte、short、char、int
	引用数据类型：String字符串、enum枚举
	3.switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略。
	“匹配哪一个case就从哪一个位置向下执行，直到遇到了break或者整体结束为止。”

循环结构的基本组成部分，一般可以分为四部分：
	1.初始化语句：在循环开始最初执行，而且只能做唯一一次。
	2.条件判断：如果成立，则循环继续；如果不成立，则循环退出。
	3.循环体：重复要做的事情内容，若干行语句。
	4，步进语句： 每次循环之后都要进行的扫尾工作，每次循环结束之后都要执行一次  如：i++

4.循环结构：
	a） for循环：格式比较死，擅长控制次数
			for（1初始化语句；2条件判断；步进语句）{
				3循环体；
			}
		死循环格式：
			for（；；）{
				循环体；
			}
	b） while循环：格式比较灵活，不在意次数
		i：  标准格式
			while（1条件判断）{
				2循环体；
			}
		ii： 扩展格式
			1初始化语句；
			while（2条件判断）{
				3循环体；
				4步进语句；
			}
		iii： 死循环格式
			while（true）{
				循环体；
			}

do -while循环的标准格式：

	do{
		循环体;
	}while(条件循环);          //分号不要忘记写

	扩展格式：
		初始化语句
		do{
			循环体；
			步进语句；
		}while(条件判断);	

三种循环的区别：
	1.如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do-while循环至少会执行一次。
	2.for循环的变量在小括号当中定义，只有循环内部可以使用。while循环和do-while循环初始化语句本来就在外面，所以出来循环之后还可以继续使用。
	
5.条转格式语句：
break关键字的用法：
	a)可以在switch语句中使用，一旦执行，switch语句立刻结束
	  还可以在循环语句中使用，一旦执行，整个循环立刻结束
	break内循环控制外循环：
		名字：for(){
			for(){
				break 名字；
			}
		}
		
	b）continue：一旦执行，当前单次循环立刻结束，马上开始下一次
	continue在for循环和while循环中的区别：
		int i = 0;
		while(i < 10){
			if(i == 3){
				continue;	//在while循环中，此时遇到continue后i++永远不会执行						所以会进入死循环，这种现象在for循环中不会出现
			}
			i++;         
		}
	
6.循环嵌套：
	for(初始化表达式；循环条件；步进语句){
		for(初始化表达式；循环条件；步进语句){
			语句体内；
		}
		语句体外；
	}


break：退出循环体执行剩余方法
continue：跳出本次循环进入下一次循环
return：结束方法