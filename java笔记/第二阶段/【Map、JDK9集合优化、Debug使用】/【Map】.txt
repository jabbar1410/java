Map集合：（双列集合，它也属于接口）
	位置：java.util.Map

	特点：
		1.键唯一，值可以重复
		2.键和值一一映射，也就是一个键对应一个值
		3.通过键找到值（通过键维护关系）
	
	【注意事项】：Map中的集合不能包含重复的键，值可以重复，每个键只能对应一个值。

	子类：
		HashMap：存储数据采用的哈希表结构，元素的存取顺序不能保证一致，由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法
		
		LinkedHashMap：它属于HashMap的子类，存储数据采用的哈希表结构+链表结构（数组+链表+红黑树）。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。

	提示：Map接口中的集合都有两个泛型变量，在使用时，要为两个泛型变量赋予数据类型。两个泛型变量的数据类型可以相同，也可以不同。

	


	常用方法：
		1.public V put(K key,V value): 把指定的键与指定的值添加到Map集合中
			//若存入的key不存在，返回null；若key已存在，返回被替换的值

		2.public V remove(Object key): 把指定的键，将所对应的键值对元素在Map集合中删除，返回被删除的元素（如果要删除的键不存在返回null）

		3.public V get(Object key): 根据指定的键，在Map集合中获取对应的值（如果要查询的键不存在返回null）

		4.public boolean containsKey(Object ksy): 判断集合中是否有该键
		
		5.public Set<K> keySet(): 获取Map集合中的所有键，存储到Set集合中

		6.public Set<Map.Entry<K,V>> entrySet(): 获取到Map集合中所有的键值对对象的集合（Set集合）




Map集合的遍历方式：
	步骤：
		1.获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键（keySet）
			//Set<E> list = map.keySet();
		2.遍历Set集合，得到每一个键
			//for( E e : list){
				E key = e;
			}
		3.根据键，获取所对应的值（get（K key））
			// T value = map.get(key);


Entry键值对对象：
	概述:  Map 中存放的是两种对象，一种称为key(键)，一种称为value(值)，它们在在 Map 中是一一对应关 系，这一对对象又称做 Map 中的一个 Entry(项) 。 Entry 将键值对的对应关系封装成了对象。即键值对对象，这 样我们在遍历 Map 集合时，就可以从每一个键值对（ Entry ）对象中获取对应的键与对应的值。

	
	常用方法：（public Set<Map.Entry<K,V>> entrySet() 通过此方法获取entry对象集合）
		1.public K getKey(): 获取Entry对象中的键
		2.public V getValue(): 获取Entry对象中的值

	


JDK9对集合添加的优化：
	添加了几种集合工厂方法，新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。
	方法：
		of（...）方法 //它属于重载方法
	
	示例：
		List<String> list = List.of("","","");
		Set<Integer> set = Set.of("","","");

	【注意事项】：通过此方法定义的集合不能发生改变（即：不能进行增删）




Map集合的一些子类：

        HashMap<String, String> m1 = new HashMap<>();线程不安全

        Hashtable<String, String> m2 = new Hashtable<>();线程安全。源代码里面，许多重要的方法，都用同步锁锁住了，代码安全，但是相对的降低了效率

        ConcurrentHashMap<String, String> m3 = new ConcurrentHashMap<>();线程安全，部分高，部分低。解决了部分Hashtable效率低的问题（不是全部解决）

	