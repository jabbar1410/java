### 						JavaScript基础

**概念**：javascript是一门【客户端】脚本语言。每个浏览器都有JavaScript的解析引擎

​		*脚本语言*：不需要编译，直接就可以被浏览器解析执行

**功能**：

​	可以用来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。

#### ECMAScript：客户端脚本语言的标准

​	**1.基本语法**

​		① 与html结合方式

```
			*内部JS：
				<script>alert(“hello”)</script>,标签体内容就是js代码
			*外部JS：
				<script src=‘a.js’></script>,通过src属性引入外部的js文件
			*注意：
				（1）<script>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序
				（2）<script>可以定义多个
```

​		② 注释

```
			* 单行注释：  //
			* 多行注释：/* 注释内容 */
```

​		③ 数据类型

```
			* 原始数据内容（基本数据类型）
				（1）number：数字。 如：整形、小数、NAN（not a number 一个不是数字的数字类型）
				（2）string：字符串。 如：字符串 "abc" "a"  'abc'
				（3）boolean：true和false
				（4）null：一个对象为空的占位符
				（5）undefined：为定义。如果一个变量没有给初始化值，则会被默认赋值为undefined
			* 引用数据类型：对象
```

​		④ 变量（一小块存储数据的内存空间）

```
			* Java语言是强类型语言，而JavaScript是弱类型语言
				（1）强类型：在开辟变量存储空间时，定义了空间将来存储数据的数据类型。只能存储固定的数据
				（2）弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存储任意类型的数据。
			* 【语法】：  var 变量名 = 初始化值；
			  【提示】：通过typeof（变量名） 查看数据变量数据类型
```

​		⑤ 运算符

```
			* 一元运算符：只有一个运算数的运算符
				如：++，--，+（正号），-（负号）
			* 算数运算符
				如：=，+=，-=，
			* 比较运算符
				如：>，<，>=，<=，==，===（全等于）
				*比较方式：
					（1）类型相同，直接比较
							* 特殊：字符串比较是，按字符一个一个逐一比较，指导得出大小为止
					（2）类型不同
						* ==  ,先进行类型转换，再比较
						* ===  ,在比较浅先判断类型，如果类型不一样，则直接返回false
			* 逻辑运算符
				如：&&，||，！
			* 三元运算符
				判断语句 ？ 值1 ：值2
			
			【注意】：在JS中，如果运算数不是算数符所要求的类型，那么js引擎会自动的将运算数进行类型转换
				* 其他类型转成number：
					* string转number：按照字面值转换。如果字面值不是数字，则转为NaN
					* boolean转number：true转为1，false转为0
				* 其他类型转换为boolean：
					（1）number：0或NaN为假，其他为真
					（2）string：除了null和空字符串（""），其他都是true
					（3）null和undefined：都是false
					（4）对象：所有对象都为true
					【提示】：document.write(!3 + "<br>"); //这里3前面的！，先将number转换为boolean，在进行了非运算，所以一个！返回false
					
```

```
个人总结：
	1.不进行计算，光在基本类型前加+或-,会把基本类型转为number。
	2.各基本数据类型转为number后的值：
			* "123"  -->   123
			* "abc"  -->   NaN
			* false  -->   0
			* true  -->   1
			* null   -->   0
			* undefined  -->  NaN
	3.进行计算时：
		* string与number运算结果为string类型
		* 其他类型与number运算结果都为number类型（按照上面转换规则计算）
```

​		⑥ 流程控制语句

```
	1. if...else...
	2. switch:  【特殊】：在JS中，switch语句可以接受任意的原始数据类型，且在与case表示时通过===比较
	3. while
	4. do...while
	5. for
```

​		⑦特殊语法

```
	1.JavaScript中语句以；结尾，如有一行只有一条语句，则；可以省略（不建议）
	2.变量的定义使用var关键字，也可以不使用
		* 用了：定义的变量是局部变量
		* 不用：定义的变量是全局变量（不建议）
			【注意】：放在里边效果,如果不调用方法,也不能使用里面的变量.
```

#### 	2.JS基本对象

​		① Function：函数（方法）对象

```
1.创建
	（1）var fun = new Function（形式参数列表，方法体）；  //不常用
	（2）function 方法名称（形式参数列表）{ 方法体 }
	（3）var 方法名 = function(形式参数列表){ 方法体 }
	【注意】：后边两种方法的function首字母f小写
2.属性：
	length：代表形参的个数
	//可通过  方法.length 调用
3.特点：
	（1）方法定义时，形参的类型不用写，返回值类型也不用写
	（2）方法时一个对象，如果定义名称相同的方法，不会报错，它会覆盖前面的方法
	（3）在JS中，方法的调用只与方法的名称有关、和参数列表无关（即：参数写多写少都行）
	（4）在方法声明中有一个隐藏的内置对象（数组），arguments，封装了所有的实际参数
4.调用：
	方法名称（实际参数列表）；
```

​		②Array：数组对象

```
1.创建
	（1）var arr = new Array(元素列表);
	（2）var arr = new Array(默认长度);
	（3）var arr = [元素列表];
2.方法
	（1）join（参数）：将数组中的元素按照指定的分隔符拼接为字符串
	（2）push（）：向数组的末尾添加一个或更多元素，并返回新的长度
3.属性
	length：数组的长度
特点：
	（1）JS中，数组元素的类型是可变的
	（2）JS中，数组长度是可变的
```

​		③Date：日期对象

```
1.创建：
	var date = new Date();
2.方法：
	（1）toLocaleString(): 返回当前date对象对应的时间本地字符串格式
	（2）getTime（）：获取毫秒值，返回当前系统时间离时间原点的毫秒值差
```

​		④Math：数学对象

```
1.创建：
	Math对象不用创建，直接使用。Math.方法名（）；
2.方法：
	（1）random（）：返回0~1之间的随机数。含0不含1 [0,1）
	（2）ceil（x）：对数进行向上取整
	（3）floor（x）：对数进行向下取整
	（4）round（x）：对数惊醒四舍五入
3.属性：
	PI：计算圆周率
```

​		⑤RegExp：正则表达式对象

```
1.正则表达式：定义字符串的组成规则
	* 单个字符：[]
		如：[a] [ab] [a-zA-Z0-9]
		* 特殊符号代表特殊含义的单个字符：
			\d:单个数字字符 [0-9]
			\w:单个单词字符[a-zA-Z0-9]
	* 量词符号：
		？：表示出现0次或多次
		* ：表示出现0次或多次
		+ ：出现1次或多次
		{m,n}：表示m<=数量<=n
			* m如果缺省：{，n}：最多n次
			* n如果缺省：{m，}：最少出现m次
			* {m}：要出现m次
	* 开始结束符号：
		^ ：开头“ ：从这个字符开始计算
		$ ：结尾” ：到这个字符为止结束计算
2.正则对象：
	* 创建：
		（1）var reg = new RegExp（"正则表达式"）；
				【注意】：第一种方式，正则表达式为字符串形式，在写\d、\w时，需要写写两个斜杠转译。如：\\d、\\w
		（2）var reg = /正则表达式/;
	* 方法：
		test（参数）：验证指定的字符串是否符合正则定义的规范
```

​		⑥ Global

```
1.特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。 方法名（）；
2.方法：
	（1）encodeURI（）：url编码
		decodeURI（）：url解码
	（2）encodeURIComponent（）：url编码，编码的字符更多
		decodeURIComponent（）：url解码
```

```
		编码方式：
			要转译的字符：传智播客
			16进制表示：1101 0011 1101 0011 1101 0011 1101 0011 1101 0011
														    %  D    3
				在每个字节前加一个%，最后组成类似%D1%A3%D1%A3%D1%A3%D1%A3
```

```
	（3）parseInt（）：将字符串转为数字
		parseFloat（）：将字符串转为字符
			* 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number
			如："123acb" --> 123
			    "a123asd" --> NaN
	（4）isNaN（）：判断一个值是否是NaN
			* NaN与如何类型==判断都为false，与NaN也是false
	（5）eval（）：计算JavaScript 字符串，并把它作为脚本代码来执行。
			如：var a = "alert("abc")";
				eval(a);  //结果为abc
```

