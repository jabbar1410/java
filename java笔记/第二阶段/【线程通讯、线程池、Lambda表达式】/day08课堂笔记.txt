多线程间的通讯：
	多个线程间进行信息（信号）的交换：等待唤醒机制
	
		synchronized关键字
			synchronized（obj）{
			
				obj.wait();
			
			}
			
			synchronized（obj）{
			
				obj.notify(); //只能唤醒一个等待中的线程，随机唤醒
				//notifyAll();
			
			}
			
			
			public synchronized void getxx(){
			
				wait();
			
			}
			
			public synchronized void getyy(){
			
				notify();//notifyAll();
			
			}
			
		Lock锁机制：
			Lock lock = new ReentrantLock();
			Condition c1 = lock.newCondition();
			Condition c2 = lock.newCondition();
			
			public void getxx(){
				lock.lock();
				//
				if(){
					c1.await();
				}else{
				
					c2.signalAll();
				}
				
				lock.unlock():
			}
			
			public void getyy(){
				lock.lock();
				//
				if(){
					c2.await();
				}esle{
					c1.signalAll();
				}
				lock.unlock():
			}
			
	多线程间通讯使用前提：
		多个线程操作同一资源
		多个操作方式不一样
		多个操作的顺序有要求

线程池:装线程的一个容器
	避免创建线程栈和销毁线程栈的时间开销，从而提升我们程序运行效率
	
	ExecutorService executor = Executors.newFixedThreadPool(2);
	
	Futrue executor.submit(runnable); // 内部还是调用execute方法执行任务
		futrue.get();//该方法是阻塞式的，会终端当前线程的执行
	void executor.execute(runnable);
	

Lambda表达式：新思想，新写法
	传统写法：
		new Thread(new Runnable(){
			run(){
			
			}
		}).start();
	
	Lambda表达式写法：
		new Thread(()->System.out.println("===")).start();
		
		标准写法三个部分：一些参数，一个指向，一段代码
		
		(变量名,..) -- 方法参数列表:因为Lambda表达式使用有一个前提，接口中有且只有一个抽象方法，该方法 在调用时，参数类型已经是固定的，参数类型可以省略；
			如果方法参数只有一个的话，()可以省略
		->
		{} -- 业务的代码：如果业务代码只有一行，不管是否有返回值，大括号都可以省略，如果有返回值，return和后面的语句分号都可以省略


		Comparator<Person> c = (p1,p2)-> p1.getAge()-p2.getAge();

=====================================
File对象：java中封装文件或者文件夹的对象
	new File(String path);
	new File(String parentPath,String filename);
	new File(File parentFile,String filename);
	
	
	获取方法:
		getName()
		length() 单位是 b
		getAbsolutePath() - 从盘符开始的路径
		getPath() -获取封装路径
		lastModified() - 获取文件上次修改的时间（做文件缓存清理时）
		
	相对路径和绝对路径：
		绝对路径：从盘符开始的路径
		相对路径：相对的是当前的工程，
			如果访问的是当前工程下的文件，new File("文件名");
			如果访问的是当前工程下的module中的文件，new File("module/文件名");
			
	判断功能：
		exists()
		isFile();
		isDirectory()
		
	创建及删除功能
		createNewFile()
		mkdir();
		mkdirs();
		
		delete();
	
	遍历功能
		list(); -- String[]
		listFiles(); -- File[]
		
		listFiles(FileFilter filter);
	

递归:递归虽好，但是要抱着敬畏之心
	1、方法内部自己调自己
	2、找出口 -- 没有出口--》栈溢出 --方法栈中方法过多

	内存溢出-- 堆内存溢出
	栈溢出 --方法栈中方法过多
	
	1
	2+1
	3+2+1
	...
	
	if(n==1){
		return 1;
	}
	n+getSum(n-1);
	
	
	需求：列出某个文件夹下的所有文件（包括子文件夹中的文件）
	
	public void printFileName(File file){
	
		if(file.isDirectory()){
		
			File[] files = file.listFiles();
			for(File f : files){
				printFileName(f);
			}
		
		}else{
			sout(file.getName());
		}
	}
	
	
线程池内部的原理补充：
	public ThreadPoolExecutor
	(int corePoolSize,  //核心线程数
     int maximumPoolSize, //最大线程数
     long keepAliveTime, // 存活时间
     TimeUnit unit, //存活时间的单位 常用的：毫秒 
     BlockingQueue<Runnable> workQueue, //任务的缓存队列
     ThreadFactory threadFactory, //创建线程对象的工厂
     RejectedExecutionHandler handler) //拒绝策略
		
	线程池对象初始创建时，内部是没有任何线程的，当我们向线程池提交任务（Runnabe）的时候，才会去创建线程对象
	
	execute方法的实现：
		1、先判断当前提交的任务数是否小于核心线程数，如果小于则创建线程对象执行任务
		2、如果我们提交的任务数量已经超过了核心线程数，任务会进入到任务缓存队列等待
		3、如果任务的缓存队列已经满了，这个时候会尝试着创建新的线程去执行任务
			什么情况下会创建成功：最大线程数相对于核心线程数如果还有空余，此时能够创建成功，并立即执行任务
			如果创建不成功， 看拒绝策略是怎么处理的：
				AbortPolicy：暴力拒绝，会抛出异常，线程池会挂掉（常用）
				
				CallerRunsPolicy：现在提交的这个任务是在哪个线程中提交的，那么该任务就交给这个线程执行
				DiscardOldestPolicy：将缓存队列中最老的那个任务抛弃掉，然后把当前的任务放入缓存队列中
				DiscardPolicy：直接将当前的任务抛弃
				
				
			缓存队列：
				ArrayBlockingQueue：内部是是数组结构，初始化时需要传递初始容量 fifo -- 增删慢，查询快
				LinkedBlockingQueue：内部是链表结构，默认容量是int能表示的最大值 fifo -- 增删快，查询慢
				PriorityBlockingQueue：内部任何可以实现先后的排序
				SynchronousQueue：不缓存任务，只做任务的一个传递
				
				
		long keepAliveTime, // 存活时间
		TimeUnit unit, //存活时间的单位 常用的：毫秒 
			以上两个参数决定：最大线程数相对于核心线程数多出来的线程的空闲存活时间
			
			
		类比公司：	
			开发人员只能是3个，最多6个人（三个外包）
			需求来了，招人
			
			再来第四个需求时，还能找人吗？ --不能， 需求暂时放在等待
			不停的提需求；
			
			需求过多，想办法找外包人员解决一部分需求
			
			外包人员解决完后，如果没有后续需求，解除外包关系
			
	java中默认四个线程池的内部实现及使用场景：
		Executors.newFixedThreadPool(3) -- new ThreadPoolExecutor(3, 3,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>()
			可以非常好的控制系统的内存，可以承载大并发量的访问
			
		Executors.newCachedThreadPool() --  new ThreadPoolExecutor(0, Integer.MAX_VALUE,60L, TimeUnit.SECONDS,new SynchronousQueue<Runnable>())
			可以处理超短时大量的任务，不可以承载大并发量访问 （慎重使用）
			
		Executors.newSingleThreadExecutor() -- new ThreadPoolExecutor(1, 1,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>())
			多任务的串行执行
			
		Executors.newScheduledThreadPool(2) -- ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue)
			任务的定时调度
		
		
		
		
	如果我们是自定义线程池，那么核心线程数取多大是最合理的？
		任务时间很短（毫秒级-秒级），cpu密集型任务，核心线程数 cpu核数+1
		任务时间很长（分钟级） io密集型任务，核心线程数 cpu核数*2
		
		
	通过自定义线程池完成线程名称的自定义：
		ThreadPoolExecutor threadPool = new ThreadPoolExecutor(3, 3, 0l, TimeUnit.MILLISECONDS, new LinkedBlockingDeque<>(), new ThreadFactory() {
            @Override
            public Thread newThread(Runnable r) {
                Thread thread = new Thread(r);
                thread.setName("==");
                return thread; //返回线程对象，并给线程对象设置名称
            }
        });
		
		
学有余力：
	volatile关键字
	Thread.yield();
	Thread.join();
	
		
	 
	 
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		