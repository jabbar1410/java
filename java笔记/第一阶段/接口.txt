如何将一个字符串“100”转换成为int数字100？
Integer.parseInt(String str):参数是字符串，返回值是int数字，可以将字符串转换成为int数字。
但是前提是：这个参数字符串必须只含有数字，不能有其他字符等

1.使用接口的好处：通用性、隔离性

2.定义接口的格式：
	public interface 接口名{
		//...
	}
	
3.接口的组成部分：
	a）抽象方法【核心内容】
	b）常量
	c）默认方法（Java 8）
	d）静态方法（Java 8）
	e）私有方法（Java 9）
	
4.定义一个抽象方法，格式：
	public abstract 返回值类型 方法名（参数类型 参数名）；
	a）修饰符public abstract也可以省略不写
	b）抽象方法不可以写方法体大括号,直接分号结尾
	c）接口中的抽象方法，修饰符可以省略不写，默认就是：public abstract
	
5.接口要想使用，一定要有一个实现类。如何实现？
	public class 类名称 implements 接口名{
		//覆盖重写所有的抽象方法；
	}
	
6.如何覆盖重写(Override)抽象方法呢？一般步骤：
	a）将抽象方法抄写过来
	b）去掉abstract关键字
	c）写上大括号方法体
	
7.使用接口和实现类的一般格式:
	a）创建：接口名称 引用名 = new 实现类名称（）；
	b）调用：引用名.抽象方法名（参数）；
	c）注意：
		i.只能调用左侧接口当中定义好的方法，无法调用右侧类当中特有的方法
		ii.运行程序的时候，方法的执行者其实是右边的类对象。
		iii.调用的时候看左边，但是运行的时候看右边。
	注意：
	1.左边是接口类型，那么只能调用接口当中定义好的内容，不能调用右侧实现类当中特有的内容。（接口隔离）
	2.当调用接口当中的抽象方法时，真正进行运行的是右侧new的时候类的具体方法内容。
	3.调用的时候看左边，运行的时候看右边

使用接口的好处：	屏蔽了右侧的个性特有的内容，达到隔离、统一的目的。 
	
8.从Java 8开始，没有接口的实现类，也可以直接使用接口：Lambda表达式。Lambda表达式就代替了实现类

9.Lambda使用前提：一定要有函数式接口才能使用，没有函数式接口就不能用Lambda表达式

10.函数式接口：有且仅有一个抽象方法的接口。@FunctionalInterface,这是一个可选的检测手段而已，写在接口的前一行，如果没有报错则为函数式接口

11.使用Lambda必须有推断环境：
	a）要么根据参数类型传参来推断函数式接口
	b）要么就根据赋值语句左侧类型来推断函数式接口

例如抽象方法：
public abstract int sum(int a int b);	
12.Lambda表达式的标准格式：（int a,int b）->{return a+b;}
	a)一些参数（方法的参数）
	b)一个箭头
	c)一些代码（方法体）
	
函数式接口方法：
public abstract int singlePlus(int i);
13.Lambda表达式的简便格式：
	（int num）->{return ++num;}
	（num）->{return ++num;}
	num->{return ++num;}
	num->++num;
	a)参数的类型可以省略
	b）如果有且仅有一个参数，那么小括号可以省略
	c)如果有且仅有一个语句，那么大括号和return也可以省略



	