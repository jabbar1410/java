Lambda表达式：
	理解：Lambda表达式的语义本身就代表了怎么做这件事情，【没有对象的概念在里面】，因此不能同过Lambda表达式调用实现的方法。
	结构的初步理解：【（）-> {...}】
		1.Lambda表达式前面的小括号，其实就是接口抽象方法里的参数（一些参数（方法参数））
		2.箭头代表着小括号的数据做什么事情，是一个指向动作（一个箭头 ->）
		3.箭头后面就代表拿到了参数之后做什么事情（一些代码{方法体}）
	使用前提：必须是【函数式接口】
			//函数式接口：有且仅有一个抽象方法的接口，叫做函数式接口
	判断接口是否为函数式接口：
		//在接口定义之上@FunctionalInterface注解来判断是否为函数式接口

	注意事项： Lambda表达式要想使用，【一定要有函数式接口的推断环境】
		1.表达式作为方法参数是，通过方法的参数类型来推断它属于什么函数式接口
		2.可以通过接口类型接收表达式来确定，表达式属于哪个函数式接口

	简化Lambda表达式:
		1.Lambda表达式当中的参数类型可以省略不写。
		2.如果参数有且仅有一个，那么小括号可以省略
		3.如果语句体只有一个，anemia大括号和return关键字也可以省略



Lambda表达式中的方法引用：//【个人理解：当Lambda表达式的参数为引用方法的参数时，可以使用方法引用】
	应用场景： 如果Lambda表达式需要做的事情，在另一个类当中已经做过了，那么就可以直接拿过来替换Lambda。

	方法引用的写法：//使用时方法参数必须与接口中方法参数匹配
		1.通过类名称应用静态方法， 格式:  类名称::静态方法名
		2.通过对象引用成员方法，  格式： 对象名::成员方法名





Stream流：
	概念：Java 8当中的“流”其实就是Stream接口的对象
	JDK提供了一个流接口：java.util.stream.Stream<T>

	如何获取流？
		1.根据集合获取流
			ArrayList<String> list = new ArrayList<>();
			Stream<String> streamA = list.stream();
		2.通过数组获取流
			String[] arrayStr = {"Hello","world","Java"};
			Stream<String> streamB = Stream.of(arrayStr);

	方法：
		1.Stream<> map(用于转换的Lambda表达式)  //获取流之后，可以使用映射方法
			//映射：就是将一个对象转换成为另一个对象，把老对象映射到新对象上

		2.Stream<> filter(能产生boolean结果的Lambda)：过滤方法：如果参数Lambda产生了true，则要元素；如果产生了false，则不要元素

		3.void forEach(Lambda表达式)：对流中的每一个元素进行遍历,【每一个元素都要进行操作】
			//参数Lambda表达式必须是一个能够消费一个参数，而且不产生数据结果的Lambda。（就是【只有一个参数，但是没有返回值】）
