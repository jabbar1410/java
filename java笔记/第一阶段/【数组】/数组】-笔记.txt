数组的特点：
	1.是一种引用数据类型
	2.可以存放多个数据，但是数据类型必须统一
	3.数组的长度在程序运行期间不可改变

定义数组：
	a） 数据类型[] 数据名称;
	b） 数据类型 数组名称[];(了解即可)
	
数组的初始化：
	a） 动态初始化：指定长度  
	// 动态初始化后，会给元素赋默认值
	b） 静态初始化：指定内容 
	// 静态初始化其实有默认值的过程，只不过系统自动马上将默认值换成了大括号当中的具体值。 
	
动态初始化的格式：
	a） 一个步骤：
		数据类型[] 数组名称 = new 数据类型[数组长度];
	b） 两个步骤：
		数据类型[] 数组名称；
		数组名称 = new 数据类型[数组长度];

静态初始化的格式：
	a） 标准格式：
		数据类型[] 数组名称 = new 数据类型[]{元素1，元素2，元素3，...}；  //{}前面的[]不能写长度，如果写了编译报错
	b） 简便格式：
		数据类型[] 数组名称 = {元素1，元素2，元素3，...}；
	c） 标准格式可以拆分成为两个步骤，但简便格式不能拆分写必须一个步骤完成。

数组的使用：
	1.访问数组元素格式：
		数组名称[索引值];  //索引值：代表数组中的元素编号，索引值从0开始，一直到数组长度-1为止。
	2.给元素赋值：
		数组名称[索引值] = 数据值；
		
	3.获取数组的长度：
		数组名称.length；    //程序运行期间数组长度不会发生改变
	4.数组必须进行new初始化才能使用其中的元素。如果只是赋值了一个null，打印数组显示null，但操作元素会发生空指针异常

数组越界异常：
	int[] arr = {1,3,5};
	System.out.println(arr[3]);      //java.lang.ArrayIndexOutofBoundsException
数组空指针异常：
	int[] arr2 = {1,3,5};
	arr2 = null;                     //arr2不在保存数组地址
	System.out.println(arr2[2]);     //java.lang.NullPointerException

数组遍历：	//IDEA中的快捷创建方式： 数组名称.fori
	格式：
		for(int i = 0; i < arr.length; i++){
			System.out.println(arr[i]);
		}

数组元素位置颠倒（不创建新的数组）：
	方法：
		1.使用两个索引，分别指向数组的起始和末尾，然后同时向中间靠拢
		2.使用第三个变量作为容器，来对数组元素进行对调
	示例：
    public static void swap(int[] arr){
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
        System.out.println();
        System.out.println("===================");
        System.out.println();
        int index1 = 0;
        int index2 = arr.length - 1;
        int num = 0;
        while(index1 <= index2){
            num = arr[index1];
            arr[index1] = arr[index2];
            arr[index2] = num;
            index1++;
            index2--;
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

数组作为方法参数：
	修饰符 返回值类型 方法名（数组类型[] 数组名）{}   // 参数为数组地址

数组作为返回值：
	修饰符 数组类型 方法名（参数类型 参数名）{
		return 数组；  // 返回的为数组地址
	}

二维数组定义方式：
	方法一：
	int[][] arr = new int[3][4];
	其中：arr[0],arr[1],arr[2]表示三个一维数组地址，想要访问元素必须写成arr[0][0]格式
	方法二：
	int[][] arr = {{...},{...},{...}...};

二维数组的遍历：
	int[][] arr4 = {{11,12,13},{24,25},{36,37,38,39}};
	for(int i = 0;i < arr4.length; i++){
		for(int j = 0;j < arr4[i].length;j++){
			System.out.println(arr4[i][j]);
		}
	}
	//数组中存放对象其实存储的是对象的地址值,二维数组当中的子数组就是一个地址值


Java内存分为5个部分：
	a） 栈（Stack）：存放方法中的局部变量。方法的运行一定要在栈当中运行。
		局部变量：方法的参数，或者方法{}内部的变量
		作用域：一旦超出作用域，立刻从栈内存当中消失
	b） 堆（Heap）：new出来的东西堆。
		堆内存里面的东西都有一个地址值：16进制
		堆当中的数据有默认值规则：
			int类型默认值为0
			浮点类型默认值为0.0
			字符类型默认值为‘\u0000’（Unicode写法）  //为不可见字符
			布尔类型默认值为false
			引用类型默认值为null   // 所有引用类型都能赋null值，表示其中什么也没有
	c） 方法区（Method Area）：存放.class相关信息，包含方法的信息。
	d） 本地方法区（Native Method Area）：与操作系统相关
	e） 寄存器（pc Register）：与CPU相关，性能极高