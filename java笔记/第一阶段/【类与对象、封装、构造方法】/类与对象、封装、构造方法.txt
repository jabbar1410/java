面向过程：当需要实现一个功能的时候，每一个过程中的详细步骤和细节都要自己做。

面向对象：当需要实现一个功能的时候，不关心详细的步骤细节，而是找人帮我做事
	面向对象的三个特征：
		1.封装
		2.继承
		3.多态

类和对象的关系：
	a） 类事抽象的，通常不能直接使用。好像是一张手机设计图纸。
	b） 对象是具体的，根据类创建一个对象使用，也就是根据图纸创造一个手机。
	
如何定义一个类：成员变量、成员方法。
	a）成员变量：直接定义在类当中，在方法外面
	b）成员变量：去掉static关键字，其他和此前的普通方法一样

如何根据类创建对象：    //通常情况下，一个类并不能直接使用，需要根据类创建一个对象，才能使用
	1.导包       //如果与含有main方法的类在同一个包下，那么可以省略导包语句
		import 包名称.类名称；
	2.创建对象：
		类名称 对象名 = new 类名称（）；
	3.如何使用对象：
		a）使用成员变量：对象名.成员变量名；	//没有对成员变量赋值，打印输出为默认值
		b）调用成员方法：对象名.成员方法名（参数）； 

局部变量和成员变量的区别：
	a）定义的位置不同
		局部变量：定义在方法内部的
		成员变量：直接定义在类当中，在方法的外面的
	b）内存的位置不同
		局部变量：在栈内存当中，Stack
		成员变量：在堆内存当中，Heap
	c）生命周期不同
		局部变量：随着方法的进栈而出现，随着方法的出栈而消失
		成员变量：随着对象被创建而出现，随着对象被JVM回收而消失
	d）默认值不同
		局部变量：没有默认值，必须赋值之后才能使用	//方法参数也是局部变量，在调用的时候必然会被赋值
		成员变量：如果没有赋值，那么将会有一个默认值
	e）作用范围不一样：
		局部变量：只有方法当中才能被使用，出了方法就不能再用
		成员变量：整个类全都可以通用
	
使用对象作为方法的参数：
	public static void 方法名（类名称 类对象）{}   //参数为传递的是地址值
使用对象作为返回值：
	public static 类名称 方法名（）{
		return 类对象；    // 返回的是地址值
	}

封装性在Java中的体现：	//封装就是将一些细节信息隐藏起来，对于外界不可见。
	1.方法就是一种封装
	2.关键字private也是一种封装
		//一旦使用了private进行修饰，那么本类当中仍然可以随意访问。但是超出了本类范围之外就不能再直接访问了

private关键字用法：直接写在成员变量前面，类外面不能直接访问，确保安全性。
	间接访问：编写一对Getter Setter方法。（但是例如：如果是boolean类型，getXxx必须叫做isXxx的形式。Setter类型不变）!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
	Getter方法：
		public 返回值类型 getXxx(){
			return xxx;
		}
	Setter方法：
		public void setXxx(参数类型 xxx){
			this.xxx = xxx;
		}
	
this关键字典型用法：用来区分同名的成员变量和局部变量。在成员变量的前面写上“this.”前缀即可。
	//当局部变量和成员变量重名的时候，方法当中就会根据“就近原则”使用局部变量
	扩展：
	this关键字其实代表的是“当前对象”。
	【重点】通过谁调用的方法，谁就是this
		Person one = new Person();
		one.方法（）；    //其中this是one	
	格式：this.成员变量名
	

10.构造方法：专门用来创建对象的方法，通过new关键字创建对象就是在调用构造方法。
	格式：
		public 构造方法名（参数类型 参数名称）{
			方法体
			//return； //通常最后一行return省略不写
		}
	a）构造方法不能写返回值类型，连void都不能写。
	b）构造方法的名称必须和所在的类名称完全一样，大小写也要一样
	c）构造方法也是可以重载的
	d）构造方法不能return一个具体的返回值
	e）构造方法如果没有定义，默认会有一个；如果定义了，那么默认的将失效
	默认为：
		public 类名称（）{}；
	
如何定义一个标准的类：	     //标准类也叫Java Bean
	a）所有的成员变量都用private修饰
	b）为每一个成员变量编写一对Getter Setter方法
	c）编写一个无参数的构造方法
	d）编写一个全参数的构造方法

在IDEA中如何使用快捷键生成标准类：
	1.编写Getter、Setter:
		Code--Generate(快捷键alt + insert)--Getter and Setter--按住shift选取成员变量
	2.编写无参构造
		Code--Generate(快捷键alt + insert)--Constructor--Select None
	3.编写全参构造
		Code--Generate(快捷键alt + insert)--Constructor--按住shift选取成员变量