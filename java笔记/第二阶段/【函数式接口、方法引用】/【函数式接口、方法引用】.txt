函数式接口：
	概念：有且仅有一个抽象方法的接口

	格式：
		修饰符 interface 接口名称{
			public abstract 返回值类型 方法名称（可选参数信息）;
			//其他非抽象方法	
		}

	注解： @Functionallnterface（判断是否为函数式接口，需要用在接口上面）

	【注意】：匿名内部类在编译时会产生类字节码文件，Lambda表达式不会产生编译时类字节码文件




Lambda表达式中的方法引用：//【个人理解：当Lambda表达式的参数为引用方法的参数时，可以使用方法引用】

	理解：1.构建对象的另一种Lambda表达式的写法（也相当与匿名内部类）
	      2.当接口要定义的方法内容与其它地方定义的方法要求一致时，可以使用方法引用
	      3.接口中传递的参数，必须要在引用方法的参数列表中
		
	应用场景： 如果Lambda表达式需要做的事情，在另一个类当中已经做过了，那么就可以直接拿过来替换Lambda。

	方法引用的写法：//使用时方法参数必须与接口中方法参数匹配

	//双冒号::为引用运算符，他所在的表达式称为方法引用

		1.通过类名称应用静态方法， 格式:  类名称::静态方法名

		2.通过对象引用成员方法，  格式： 对象名::成员方法名

		3.引用父类成员方法，	格式：super::成员方法名

		4.引用本类成员方法，	格式： this::成员方法名

		5.类的构造引用，	格式： 类名称::new
		
		5.数组的构造引用，	格式： 数组名[]::new






