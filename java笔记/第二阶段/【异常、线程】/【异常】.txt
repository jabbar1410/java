异常体系：
	异常的根类：
		java.lang.Throwable
	Throwable的子类：
		java.lang.Error与java.lang.Exception

	Error:  系统级别的严重错误，无法通过处理的错误，只能事先避免（发生此类错误时，必须修改代码，错误可以通过（try...catch）方式去处理，但不希望程序员处理）
		//内存溢出、系统崩溃
	
	Exception:  表示异常，代码级别，异常产生后程序员可以通过代码的方法纠正，使程序继续运行，是必须要处理好的。（发生此类异常，可以将异常进行处理，使程序继续运行）




Throwable的常用方法：
	1.public void printStackTrace(): 打印异常的详细信息。
	
	2.public String getMessage():  获取发生异常的原因（提示给用户的时候，就提示错误原因）

	3.public String toString():  获取异常的类型和异常描述信息




异常(Exception)的分类：

	编译时期异常： checked异常。在编译时期，就会检查，如果没有处理异常，则编译失败。（如日期格式化异常）

	运行时期异常： runtime异常。在运行时期，检查异常，在编译时期，运行异常不会编译检查(即在编译期间不报错)。（如数字异常）

	运行异常的特点：
        	方法内部抛出的是运行异常，new XXXException。方法的声明上，【不需要加throws语句】,调用者不需要处理，因为运行时异常会有一个默认得到方式交给JVM处理，中断程序。
        
	设计原因：
                运行异常，本就不能发生，但万一发生，需要程序人员停止程序修改源代码。 运行异常：一旦发生，不需要处理，修源代码，运行异常一旦发生 ，后面的代码没有执行的意义。






异常中的关键字：
	1.throw：在方法内部，抛出异常（throw用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行）
		//throw后面必须写new 对象，必须是异常的对象，必须是Exception或者它的子类
		格式:  throw new 异常类名（参数）

	2.throws：用于在方法的声明上，标明此方法可能出现的异常，throws后面必须写异常类的类名
		格式：修饰符 返回值类型 方法名(参数) throws 异常类名1，异常类名2...{  }

	【注意】: 
		1.调用了一个抛出异常的方法，调用者就必须处理，不处理，编译失败
		2.异常如果被抛出，后面的程序不在进行，必须对异常进行处理才能让程序继续执行

	示例：
		public static void main(String[] args) throws Exception{
			int[] arr = null;
			getArray(arr);
		}
		public static int getArray(int[] arr) throws Exception{
			if(arr == null){
				throw new Exception("传递的数组不存在");
			}
			int i = (arr.lenth - 1) * 2;
			return i;
		}




异常的处理方式：
	1.通过throws申明异常让虚拟机JVM进行处理（出现异常，终止程序，显示异常信息）
	2.通过try...catch...finally
		格式：
			try{
				被检测的代码（可能出现异常的代码）
			}catch(异常类名 变量){    //捕获异常，对捕获的异常进行处理
				异常的处理方式
			}finally{
				必须要执行的代码
			}
	3.异常多catch处理：
		格式：		
			try{
				被检测的代码（可能出现异常的代码）
			}catch(异常类名 变量){
				异常的处理方式
			}catch(异常类名 变量){
				异常的处理方式     //【方法throws了多少异常，就catch多少异常】
			}catch(异常类名 变量){
				异常的处理方式
			}finally{
				必须要执行的代码
			}
			
			【细节】：catch小括号中，写的是异常类的类名，它有顺序要求
				1.平级异常（没有继承关系），顺序没有要求
				2.上下级关系异常，越高级的父类写在下面

			
			try代码区中：如果代码发生异常，它下面的代码不再运行
	
			
			catch中常见的三种处理方式：
				1.记录日志
				2.打印异常信息
				3.继续抛出异常（将编译器异常变为运行期异常）
				//在catch中使用throw 抛出运行期异常，


			finally：无论程序是否有异常出现，程序必须执行（io流中释放资源应用较多）
				//当我们在try语句块中打开了一些物理资源（磁盘文件、网络连接、数据库连接等），我们都得在使用完之后，最终关闭打开的资源

	


【异常注意事项】：
	1.运行时异常被抛出可以不处理，即不捕获也不声明抛出
	2.如果父类抛出声明了多个异常，子类覆盖父类方法时，只能抛出相同的异常或者是它的子集（即从父类声明的异常中挑选）异常。
	3.父类方法没有抛出声明异常，子类覆盖父类该方法时也不可能抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出。
	4.当多异常处理时，捕获处理，前边的类不能是后边类的父类
	5.在try/catch后可以追加finally代码块，其中的代码一定会被执行，通常用于资源回收
	6.如果finally有return语句，永远返回finally中的结果，需避免该情况。
		示例：
			try{
				int i = 5 / 0;
			}catch(Exception ex){
				i = 5;
				return i;
			}finally{
				i = 6;
				return i ;
			}                      //此程序最终返回i=6，而不是5



自定义异常：（可以携带数据、可以做为异常标记）
	1.自定义一个编译期异常：自定义类并继承于java.lang.Exception
	2.自定义一个运行时期的异常类：自定义类并继承于java.lang.RuntimeException
	3.再写两个构造方法

	示例：
		public class LoginException extends Exception{
			public LoginException(){}  //创建无参构造
			
			public LoginException(String message){  //创建有参构造
				super(message);
			}
		}




Object非空判断：
	public static <T> T requireNonNUll(T obj): 查看指定引用对象不是null

