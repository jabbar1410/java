1. 变量：程序运行期间，内容在一定范围之内可以发生改变的量
   注意事项：
	1.创建的多个变量不能重名
	2.变量如果没有赋值，不能直接使用，必须首先赋值
	3.变量的作用域范围
		【作用域】变量定义在哪个大括号当中就只能在哪使用，超出了直接所属的大括号，就不能使用。
	4.可以通过一个步骤同时定义多个类型相同的变量

2.如何使用变量：
  a）一个步骤：
	数据类型 变量名称 = 数据值；
  b）两个步骤：
	数据类型 变量名称；
	变量名称 = 数据值；

3.标识符：见名知意。类名称每个单词首字母大写；变量名称第一个单词首字母小写，从第二个单词开始首字母大写。
	  取名时名字只能有字符、下划线_和$组成，且不能以数字开头。

4.数据类型（基本类型与引用类型），基本类型分为：
  a）整数类型：byte、short、int、long
  b）浮点类型：float、double
  c）字符类型：char
  d）布尔类型：boolean
  类型       字节数         数据表示范围
  byte         1               -127-128
  short        2              -32768-32767
  int          4           -2147483648-2147483647   
  long         8             -2^63-2^63-1
  float        4           -3.403E38-3.403E38                 //E38表示10^38
  double       8           -1.798E308-1.798E308
  char         2             表示一个字符，如（‘a’，‘A’，‘0’，‘家’），范围0-65535
  boolean      1             只有两个值true和false
注意事项：
  1.创建整数时默认为int类型
  2.创建浮点数时默认为double类型
  3.创建long类型数据时需要添加L
  4.创建float类型数据时需要添加F

数据范围：byte < short < char < int < long < float < double   
					//存储空间：long > float  数据范围：long < float
自动类型转换：(隐式)
	1.特点：代码不需要特殊处理自动完成
	2.规则：数据范围从小的到大
	3.例如：long num1 = 100;     double num2 = 2.5F;
强制类型转换：（显式）    // 可能发生精度损失、数据溢出
	1.格式：范围小的类型 范围小的数据变量名 = （范围小的类型）原本范围大的数据；
	2.例如：int num = (int)100L;      
注意事项：
	1.可能发生精度损失、数据溢出
	2.byte/short/char一旦进行了数学运算，都会首先提升成为int类型，然后进行计算
	例1：
		byte umb1 = 40;
		byte umb2 = 50;
		int umb3 = umb1 + umb2;   //这里必须要用int接受，用byte接受会报错
	// byte + byte --> int  +   int
	例2：
		System.out.println('A'+1);  // 结果为66
				//int（65）+int（1）=66 
	3.boolean类型不能发生数据类型转换
	4.对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地为我们补上一个（byte）（short）（char）。
	即：1.如果没有超过左侧的范围，编译器补上强转
	    2.如果右侧超过了左侧范围，那么直接编译器报错 
	例如：
		byte num1 = 20;   //正确写法
		char zifu = 65;   //正确写法，char的范围0-65530
		byte num2 = 128;  //错误写法！！编译报错
	5.在给变量进行赋值的时候，如果右侧的表达式当中全部是常量，没有变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。
	例如：short result = 5 + 8;	//等号右边全部都是常量，没有任何变量参与运算编译后，得到
					.class字节码文件当中相当于【直接就是】：short result = 13;
					这称为“编译器的常量优化”。

	      short num1 = 1;
	      short num2 = 2;
	      short result = num1 + num2;   //编译报错！！！因为一旦表达式当中有变量参与， 那么编译						器优化就不能进行了。

ASCII码表：0--48   A--65   a--97
Unicod码：包含ASCII码，并且能用数字表示中文

5.运算符：对常量或者变量进行操作的符号

6.表达式：用运算符连起来的式子

7.算数运算符：
  a）四则运算：+ - * /            //运算结果为去掉余数部分
  b）取模运算：%                  //运算结果为余数，只对整进行取模运算
  c）字符串连接：任何数据类型和字符串连在一起，都是字符串结果
  d）自增自减运算符，单独使用前后没有区别，但混合使用（打印也是）有区别              //只能用于变量
	i.前++，先加后用
	ii.后++，先用后加
注意事项：
	1.一旦运算当中有不同类型的数据，那么结果将会是数据类型范围大的
		int + double --> double + double  = double
	2.字符串String运行+运算时，表示连接，任何数据类型与字符串相加，结果都会变成字符转
	特例：当算数运算在String前面的时候，会先进行运算再与字符串连接
	如1：String s = 1 + 1 + "hhhhh";
	    System.out.println(s);                 //结果为2hhhhh
	如2：System.out.println(2 + 2 + "qqqq");   //结果为4qqqq

8.赋值运算符：
  a）基本：=
  b）复合：+= 、-=、 *=、 /=、 %=
	a+=3如同a=a+3            //左侧必须是变量，右侧随意
符合运算符包含了强制自动转换：
例如：byte num = 30;
      num += 5;		//num = num + 5; 右侧运算结果为int类型，但是+=会进行自动强制转换为byte类型 

9.比较运算符：> 、< 、>= 、<= 、== 、!=

10.逻辑运算符：
  a）与     &    &&        
  b）或     |    ||      //&&和||为短路运算符，左边已可以判断最终结果，右侧不进行
  c）异或   ^            //左右判断都为true或false为false
  d）非     ！
与、或两种运算符，如果有多个条件，可以连续写：
两个条件：条件A && 条件B
多个条件：条件A && 条件B && 条件C

一元运算符：只需要一个数据可以进行操作的运算符。例如：取反！、自增++、自减--
二元运算符：需要两个数据才可以进行操作的运算符。例如：加法+、赋值=
三元运算符：需要单个数据才可以进行炒作的运算符
	格式： 数据类型 变量名称 = 条件判断 ？ 表达式A ：表达式B；
	流程：条件判断为true,将表达式A的值赋值给左侧的变量；条件判断为false，将表达式B的值赋值给左侧的变量
	举例：
		int result = 3 < 4 ? 2.5 : 10;   //错误写法！！！2.5为double类型与接收类型不同
		System.out.println(3 < 4 ? 2.5 : 10);	//正确写法  
		3 < 4 ? 2.5 : 10;  		//错误写法！！！必须要有接收项    

11.Scanner键盘输入的三个步骤：
  a）导包：import java.util.Scanner；
  b）创建：Scanner sc = new Scanner(System.in);
  c）使用：
	i.获取int数值：int num = sc.nextInt();
	ii.获取字符串：String str = sc.next();

12.JDK9的Jshell：  //java脚本语言
	可以直接在命令框书写一些简单的代码，输入/exit退出Jshell
  