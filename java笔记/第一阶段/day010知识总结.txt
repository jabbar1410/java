1.对比一下静态方法与成员方法的区别：
	a）静态方法与对象无关，可以直接通过类名称调用：
		类名称.静态方法名（参数）；
	b）成员方法一定要有对象才能使用：
		对象名.成员方法名（参数值）；
		
2.方法引用：如果Lambda表达式想做的事情，在某一个地方某一个方法已经做过了，那么就
可以使用方法引用来代替Lambda

3.方法引用的方式：
	a）通过类名称引用静态方法:类名称::静态方法名
	b）通过对象名引用成员方法:对象名::成员方法名
	
4.Stream流式思想：简化了普通的集合操作，类似于流水线。Stream流在Java当中就是一个
java.util.stream.Stream<T>接口的对象。
	a）如何获取流：
		i.通过集合获取：集合名称.stream()
		ii.通过数组获取：Stream.of(数组名称)   注意，数组当中必须是引用类型元素
	b）映射的方法：map，参数是一个负责转换的Lambda表达式
	c）过滤的方法：fiter,参数是一个可以产生boolean结果的Lambda表达式
	d）遍历的方法：forEach,参数是一个Lambda,Lambda对应的抽象方法应该只有一个参数并且不产生返回值。
	e）如何获取并发流：
		i.直接一次性获取并发流:.parallelStream()
		ii.首先获取普通流，然后继续变成并发流:stream().parallel()
		
	5.模块化思想可以为我们带来两点好处：
		a）整体一整个，文件体积太大。如果只是用到了其中的一部分内容，就会浪费。
		b）精确控制package包级别的访问控制。只有导出的包，模块之外可以访问，否则只能模块内部自己访问。
		c）模块的描述信息module-info.java文件的基本内:
			module 本模块的名称{
				exports 导出的包名称；
				requires 需要依赖的其他模块名称；
			}